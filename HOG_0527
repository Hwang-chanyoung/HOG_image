
import numpy as np
import scipy.signal as sig
from matplotlib import pyplot as plt
from skimage.io import imread
from skimage.color import *
from skimage.transform import resize

'''
def normalization(v):
    norm_v = np.linalg.norm(v)
    if norm_v == 0:
        return v
    else:
        return v/norm_v
'''

def normalization(v): # normalizing 함수
    norm_v = (v-np.min(v))/(np.max(v)-np.min(v))
    return norm_v

img = imread('input_img.PNG')
img = resize(img, (240, 240))
img_gray = (rgb2gray(img) * 255).astype('uint16')

magnitude = np.zeros((256, 9)) # height of bar
cnt = -1
for i in range(16):
    for j in range(16):
        cnt += 1
        img_patch = img_gray[i*15:(i+1)*15, j*15:(j+1)*15]
        Gx = sig.convolve2d(img_patch, np.array([[-1, 0, 1]]), mode='same')
        Gy = sig.convolve2d(img_patch, np.array([[-1], [0], [1]]), mode='same')

        # 기울기의 길이
        tgm = np.square(Gx) + np.square(Gy) # root (x)
        tgm_int = tgm.astype('uint16')
        # 세타의 크기(라디안)
        theta = np.arctan(Gy / Gx)

        # 기울기의 크기
        ori = theta * 180 / np.pi # radian to degree
        ori[ori < 0] += 180
        dir = ori.astype('uint16') # directory : angle

        ori_bin = ['0', '20', '40', '60', '80', '100', '120', '140', '160']
        index = np.arange(len(ori_bin)) # x axis
        #magnitude = np.zeros(9) # height of bar

        for x in range(15):
            for y in range(15):
                ind = dir[x][y] // 20
                if ind == 9:    # if 180
                    ind = 0
                diff1 = abs(dir[x][y] - 20 * ind)
                diff2 = 20 - diff1
                magnitude[cnt, ind] += diff2 * tgm_int[x][y] / 20
                if ind < 8:
                    magnitude[cnt, ind + 1] += diff1 * tgm_int[x][y] / 20
                else:
                    magnitude[cnt, 0] += diff1 * tgm_int[x][y] / 20


for k in range(cnt):
    magnitude[k] = normalization(magnitude[k])

# 임의의 패치(예: 5번)의 hog를 출력
plt.bar(index, magnitude[4], tick_label=ori_bin, align='center')
plt.show()

